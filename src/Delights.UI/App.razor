@using System.Reflection
@inject ModuleCollection Modules
@inject IServiceProvider ServiceProvider
@inject Delights.Modules.Client.Core.ModuleUI ClientUI
@inject Microsoft.AspNetCore.Components.WebAssembly.Services.LazyAssemblyLoader LazyLoader

<Router AppAssembly="@typeof(App).Assembly" PreferExactMatches="@true" AdditionalAssemblies="@AdditionalAssemblies" OnNavigateAsync="@OnNavigateAsync">
    <Found Context="routeData">
        <RouteView RouteData="@routeData" DefaultLayout="@typeof(ModulePageLayout)" />
    </Found>
    <NotFound>
        <LayoutView Layout="@typeof(MainLayout)">
            <p>Sorry, there's nothing at this address.</p>
        </LayoutView>
    </NotFound>
</Router>

<AntContainer />

@code {
    List<Assembly> AdditionalAssemblies = new List<Assembly>();

    protected async Task OnNavigateAsync(NavigationContext context)
    {
        AdditionalAssemblies.Clear();

        var assemblies = AppDomain.CurrentDomain.GetAssemblies();
        var current = typeof(App).Assembly;

        List<string> toLoad = new List<string>();

        foreach (var module in Modules.AllSpecifyModules<IClientModule>())
        {
            context.CancellationToken.ThrowIfCancellationRequested();

            var ui = module.GetUI(ServiceProvider);

            if (ui.IsPage(context.Path))
            {
                foreach (var name in Enumerable.Concat(new[] { module.Metadata.EntryAssembly }, module.Metadata.Assemblies))
                {
                    context.CancellationToken.ThrowIfCancellationRequested();

                    var assembly = assemblies.FirstOrDefault(a => a.GetName().Name == name);
                    if (assembly == current)
                    {
                        continue;
                    }
                    if (assembly is not null)
                    {
                        AdditionalAssemblies.Add(assembly);
                    }
                    else
                    {
                        toLoad.Add(name);
                    }
                }
            }
        }

        if (Environment.OSVersion.Platform == PlatformID.Other)
        {
            foreach (var name in toLoad)
            {
                context.CancellationToken.ThrowIfCancellationRequested();
                AdditionalAssemblies.AddRange(await LazyLoader.LoadAssembliesAsync(new[] { name + ".dll" }));
            }
        }
        else
        {
            foreach (var name in toLoad)
            {
                context.CancellationToken.ThrowIfCancellationRequested();
                AdditionalAssemblies.Add(Assembly.Load(name));
            }
        }
    }
}