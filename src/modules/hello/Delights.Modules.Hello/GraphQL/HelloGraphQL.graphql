schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type Query {
  heartbeat: String!
  helloMessages(first: Int after: String last: Int before: String where: HelloMessageFilterInput order: [HelloMessageSortInput!]): HelloMessageConnection
  moduleManagerModules(first: Int after: String last: Int before: String where: ModuleMetadataFilterInput order: [ModuleMetadataSortInput!]): ModuleMetadataConnection
}

type Mutation {
  heartbeat: String!
}

type Subscription {
  heartbeat: String!
}

type HelloMessage {
  content: String!
}

input HelloMessageFilterInput {
  and: [HelloMessageFilterInput!]
  or: [HelloMessageFilterInput!]
  content: StringOperationFilterInput
}

input HelloMessageSortInput {
  content: SortEnumType
}

"A connection to a list of items."
type HelloMessageConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [HelloMessageEdge!]
  "A flattened list of the nodes."
  nodes: [HelloMessage!]
}

type ModuleMetadata {
  name: String!
  entryAssembly: String!
  assemblies: [String!]!
  displayName: String!
  description: String!
  version: String!
}

input ModuleMetadataFilterInput {
  and: [ModuleMetadataFilterInput!]
  or: [ModuleMetadataFilterInput!]
  name: StringOperationFilterInput
  entryAssembly: StringOperationFilterInput
  assemblies: ListStringOperationFilterInput
  displayName: StringOperationFilterInput
  description: StringOperationFilterInput
  version: StringOperationFilterInput
}

input ModuleMetadataSortInput {
  name: SortEnumType
  entryAssembly: SortEnumType
  displayName: SortEnumType
  description: SortEnumType
  version: SortEnumType
}

"A connection to a list of items."
type ModuleMetadataConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [ModuleMetadataEdge!]
  "A flattened list of the nodes."
  nodes: [ModuleMetadata!]
}

input StringOperationFilterInput {
  and: [StringOperationFilterInput!]
  or: [StringOperationFilterInput!]
  eq: String
  neq: String
  contains: String
  ncontains: String
  in: [String]
  nin: [String]
  startsWith: String
  nstartsWith: String
  endsWith: String
  nendsWith: String
}

enum SortEnumType {
  ASC
  DESC
}

"Information about pagination in a connection."
type PageInfo {
  "Indicates whether more edges exist following the set defined by the clients arguments."
  hasNextPage: Boolean!
  "Indicates whether more edges exist prior the set defined by the clients arguments."
  hasPreviousPage: Boolean!
  "When paginating backwards, the cursor to continue."
  startCursor: String
  "When paginating forwards, the cursor to continue."
  endCursor: String
}

"An edge in a connection."
type HelloMessageEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: HelloMessage!
}

input ListStringOperationFilterInput {
  all: StringOperationFilterInput
  none: StringOperationFilterInput
  some: StringOperationFilterInput
  any: Boolean
}

"An edge in a connection."
type ModuleMetadataEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: ModuleMetadata!
}

"The `@defer` directive may be provided for fragment spreads and inline fragments to inform the executor to delay the execution of the current fragment to indicate deprioritization of the current fragment. A query with `@defer` directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred is delivered in a subsequent response. `@include` and `@skip` take precedence over `@defer`."
directive @defer("If this argument label has a value other than null, it will be passed on to the result of this defer directive. This label is intended to give client applications a way to identify to which fragment a deferred result belongs to." label: String "Deferred when true." if: Boolean) on FRAGMENT_SPREAD | INLINE_FRAGMENT

"The `@stream` directive may be provided for a field of `List` type so that the backend can leverage technology such as asynchronous iterators to provide a partial list in the initial response, and additional list items in subsequent responses. `@include` and `@skip` take precedence over `@stream`."
directive @stream("If this argument label has a value other than null, it will be passed on to the result of this stream directive. This label is intended to give client applications a way to identify to which fragment a streamed result belongs to." label: String "The initial elements that shall be send down to the consumer." initialCount: Int! "Streamed when true." if: Boolean!) on FIELD