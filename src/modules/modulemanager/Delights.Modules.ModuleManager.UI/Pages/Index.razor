@page "/modulemanager"
@inherits BasePage<Delights.Modules.ModuleManager.Module>
@inject MessageService MessageService
@inject ModuleService Service
@inject ModuleCollection ModuleCollection

<AntList DataSource="@ClientModules">
    <Header>
        Client
    </Header>
    <ChildContent>
        <ListItem>
            <ListItemMeta Description="@context.Description">
                <TitleTemplate>
                    <span>@context.DisplayName @context.Version</span>
                    <span class="font-weight-light">@context.Name @@ @context.EntryAssembly</span>
                </TitleTemplate>
            </ListItemMeta>
        </ListItem>
    </ChildContent>
</AntList>
<AntList DataSource="@ServerModules">
    <Header>
        Server
    </Header>
    <ChildContent>
        <ListItem>
            <ListItemMeta Description="@context.Description">
                <TitleTemplate>
                    <span>@context.DisplayName @context.Version</span>
                    <span class="font-weight-light">@context.Name @@ @context.EntryAssembly</span>
                </TitleTemplate>
            </ListItemMeta>
        </ListItem>
    </ChildContent>
</AntList>

@code{
    List<GraphQL.IModuleMetadata> ServerModules = new List<GraphQL.IModuleMetadata>();

    List<ModuleMetadata> ClientModules = new List<ModuleMetadata>();

    protected override void OnInitialized()
    {
        Parent.Title = "Module Manager";
        base.OnInitialized();
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        ClientModules = ModuleCollection.Modules.Select(m => m.Metadata).ToList();

        try
        {
            var result = await Service.GraphQLClient.GetModulesAsync();
            result.EnsureNoErrors();
            ServerModules = result.Data!.ModuleManagerModules.Nodes.ToList();
        }
        catch
        {
            _ = MessageService.Error("Failed to fetch server module data.");
        }
    }
}
