@page "/modules"
@inherits BasePage<Delights.Modules.ModuleManager.ModuleManagerModule>
@inject MessageService MessageService
@inject ModuleManager.ModuleService Service
@inject IModuleHost ModuleCollection

<PageInfo Title="Module Manager"></PageInfo>

<AntList DataSource="@ClientModules">
    <Header>
        Client
    </Header>
    <ChildContent>
        <ListItem Actions="@(new[] { LinkRenderFragment((context.Url, "Url")) })">
            <ListItemMeta Description="@($"{context.Name}")">
                <TitleTemplate>
                    <span>@context.DisplayName @context.Version</span>
                    <span class="font-weight-light">@context.Author</span>
                </TitleTemplate>
            </ListItemMeta>
            @context.Description
        </ListItem>
    </ChildContent>
</AntList>
<AntList DataSource="@ServerModules">
    <Header>
        Server
    </Header>
    <ChildContent>
        <ListItem Actions="@(new[] { LinkRenderFragment((context.Url, "Url")) })">
            <ListItemMeta Description="@($"{context.Name}")">
                <TitleTemplate>
                    <span>@context.DisplayName @context.Version</span>
                    <span class="font-weight-light">@context.Author</span>
                </TitleTemplate>
            </ListItemMeta>
            @context.Description
        </ListItem>
    </ChildContent>
</AntList>

@code{
    List<GraphQL.IModuleManifest> ServerModules = new List<GraphQL.IModuleManifest>();

    List<ModuleManifest> ClientModules = new List<ModuleManifest>();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        ClientModules = ModuleCollection.LoadedModules.Select(m => m.Manifest).ToList();

        try
        {
            var result = await Service.GraphQLClient.GetModulesAsync();
            result.EnsureNoErrors();
            ServerModules = result.Data!.Modules.Nodes.ToList();
        }
        catch
        {
            _ = MessageService.Error("Failed to fetch server module data.");
        }
    }

    RenderFragment<(string link, string text)> LinkRenderFragment = context =>
    @<Template>
        <a href="@context.link">@context.text</a>
    </Template>;
}
